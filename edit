using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace Walmart.Models.Domain
{
    public class OrderManagement
    {
        [Key]
        public int OrderID { get; set; }
        [ForeignKey("User")]
        public int UserID { get; set; }
        [ForeignKey("ProductManagement")]
        public int ProductId { get; set; } //changed
        public int Quantity { get; set; }
        public decimal TotalPrice { get; set; }
        public string ShippingAddress { get; set; } = string.Empty;
        public string OrderStatus { get; set; } = string.Empty;
        public string PaymentStatus { get; set; } = string.Empty;
        public string ImgUrl { get; set; } = string.Empty; // **Automatically fetched**
        public ProductManagement ProductManagement { get; set; } = new ProductManagement();
        public User User { get; set; } = new User();
        public List<OrderItem> OrderItems { get; set; } = new List<OrderItem>();
    }
}

using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace Walmart.Models.Domain
{
    public class ProductManagement
    {
        [Key]
        public int ProductId { get; set; } //changed by e
        public string Name { get; set; } = string.Empty;
        public string Description { get; set; } = string.Empty;
        public decimal Price { get; set; }
        public string Category { get; set; } = string.Empty;
        public string ImageURL { get; set; } = string.Empty;
    }
}
using Walmart.Models.Domain;

namespace Walmart.Models.DTO
{
    public class OrderManagementDTO
    {
        public int UserID { get; set; }
        public int ProductID { get; set; }
        public int Quantity { get; set; }
        public decimal TotalPrice { get; set; }
        public string ShippingAddress { get; set; }
        public string OrderStatus { get; set; }
        public string PaymentStatus { get; set; }
    }
    public class OrderRequestDTO
    {
        public int ProductID { get; set; } // User selects product ID
        public int Quantity { get; set; } // Quantity of the product
        public string ShippingAddress { get; set; } // Address for delivery
        public string PaymentMode { get; set; } // Payment type: COD, Card, etc.
    }
    public class OrderResponseDTO
    {
        public int OrderID { get; set; } // Order ID
        public int ProductID { get; set; } // Product ID
        public int Quantity { get; set; } // Quantity ordered
        public decimal TotalPrice { get; set; } // Total price
        public string ShippingAddress { get; set; } // Address for delivery
        public string OrderStatus { get; set; } // Status: "Placed", "Delivered", etc.
        public string PaymentStatus { get; set; } // Payment mode
        public string ProductImageUrl { get; set; } // **Automatically fetched from product**

        public ProductManagement ProductManagement { get; set; } = new ProductManagement();
    }
    public class CheckoutDTO
    {
        public int ProductID { get; set; } // User selects product ID
        public int Quantity { get; set; } // Quantity of the product
        public string ShippingAddress { get; set; } // Address for delivery
        public string PaymentMode { get; set; } // Payment type: COD, Card, etc.
    }
}
[Authorize(Roles = "User")]
[HttpPost("Order_Now")]
public async Task<IActionResult> Post([FromBody] OrderRequestDTO orderRequest)
{
    try
    {
        var userIdClaim = User.FindFirstValue(ClaimTypes.NameIdentifier);
        if (string.IsNullOrEmpty(userIdClaim))
        {
            return Unauthorized("Session expired. Please log in again.");
        }

        var product = await _orderManagementRepository.GetProductByIdAsync(orderRequest.ProductID);
        if (product == null)
        {
            return NotFound($"Product with ID {orderRequest.ProductID} not found.");
        }

        var order = new OrderManagement
        {
            UserID = int.Parse(userIdClaim),
            ProductId = orderRequest.ProductID,
            Quantity = orderRequest.Quantity,
            ShippingAddress = orderRequest.ShippingAddress,
            PaymentStatus = orderRequest.PaymentMode,
            OrderStatus = "Placed",
            TotalPrice = orderRequest.Quantity * product.Price,
            ProductManagement = product
        };

        await _orderManagementRepository.AddOrderAsync(order);

        var orderResponse = _mapper.Map<OrderResponseDTO>(order);
        orderResponse.ProductImageUrl = product.ImageURL; // Auto-add image

        return CreatedAtAction(nameof(GetOrder), new { id = order.OrderID }, orderResponse);
    }
    catch (Exception ex)
    {
        _logger.LogError(ex, "Order Placement Error" + ex.Message + "\n" + ex.StackTrace);
        return StatusCode(500, "Internal server error" + ex.Message);
    }
}

        // ðŸš€ OrderItem Mappings
        CreateMap<OrderItem, CartItemDetailsDTO>().ReverseMap();
        CreateMap<OrderItem, OrderManagementDTO>().ReverseMap();

        // ðŸš€ OrderManagement Mappings
        CreateMap<OrderManagement, OrderRequestDTO>().ReverseMap(); // Request DTO
        CreateMap<OrderManagement, OrderResponseDTO>().ReverseMap() // Response DTO with image
            .ForMember(dest => dest.ImgUrl, opt => opt.MapFrom(src => src.ProductManagement.ImageURL))
            .ReverseMap();
        public async Task<ProductManagement> GetProductByIdAsync(int id)
        {
            return await _dbContext.ProductManagements.FindAsync(id);
        }
        public async Task AddOrderAsync(OrderManagement order)
        {
            await _dbContext.OrderManagements.AddAsync(order);
            await _dbContext.SaveChangesAsync();
        }
using System.ComponentModel.DataAnnotations;

namespace Walmart.Models.Domain
{
    public class User
    {
        [Key]
        public int UserID { get; set; }
        public string Name { get; set; } = string.Empty;
        public string Email { get; set; } = string.Empty;
        public string Password { get; set; } = string.Empty;
        public string ShippingAddress { get; set; } = string.Empty;
        public string PaymentDetails { get; set; } = string.Empty;
        public string Role { get; set; } = "User";
    }
}

using Microsoft.EntityFrameworkCore;
using Walmart.Models.Domain;

namespace Walmart.Data
{
    public class HeroDbContext : DbContext
    {
        public HeroDbContext(DbContextOptions<HeroDbContext> options) : base(options) { }

        public DbSet<ProductManagement> ProductManagements { get; set; }
        public DbSet<CartItem> CartItems { get; set; }
        public DbSet<OrderManagement> OrderManagements { get; set; }
        public DbSet<User> Users { get; set; }
        public DbSet<Admin> Admins { get; set; }
    }
}
