import React, { useEffect, useState } from "react";
import axios from "axios";
import "../styles/product.css"; // Import the CSS

const Products = () => {
  const [products, setProducts] = useState([]);
  const [editProduct, setEditProduct] = useState(null);

  const [newProduct, setNewProduct] = useState({
    productId: "",
    name: "",
    price: "",
    category: "",
    imageURL: "",
  });
  const [showAddForm, setShowAddForm] = useState(false);

  const token = localStorage.getItem("jwtToken");

  useEffect(() => {
    const fetchProducts = async () => {
      try {
        const response = await axios.get(
          "https://localhost:7162/api/Admin/Get_All_Products",
          {
            headers: {
              Authorization: `Bearer ${token}`,
            },
          }
        );
        setProducts(response.data);
      } catch (error) {
        console.error("Failed to fetch products:", error);
      }
    };

    fetchProducts();
  }, [token]);

  const handleDeleteProduct = async (id) => {
    try {
      await axios.delete(
        `https://localhost:7162/api/ProductManagement/Delete_Product/${id}`,
        {
          headers: {
            Authorization: `Bearer ${token}`,
          },
        }
      );
      setProducts(products.filter((product) => product.productId !== id));
    } catch (error) {
      console.error("Failed to delete product:", error);
    }
  };

  const handleEditProduct = async () => {
    try {
      const response = await axios.patch(
        `https://localhost:7162/api/ProductManagement/Edit_Product/${editProduct.productId}`,
        // editProduct,
        {
          productId: editProduct.productId,
          name: editProduct.name,
          price: editProduct.price,
          category: editProduct.category,
          imageURL: editProduct.imageURL,
        },
        {
          headers: {
            Authorization: `Bearer ${token}`,
          },
        }
      );
      setProducts(
        products.map((product) =>
          product.productId === editProduct.productId ? response.data : product
        )
      );
      setEditProduct(null);
    } catch (error) {
      console.error("Failed to edit product:", error);
    }
  };

  const handleAddProduct = async () => {
    try {
      const response = await axios.post(
        "https://localhost:7162/api/ProductManagement/Add_Products",
        newProduct,
        {
          headers: {
            Authorization: `Bearer ${token}`,
          },
        }
      );
      setProducts([...products, response.data]);
      setNewProduct({
        //productId: "",

        name: "",
        price: "",
        category: "",
        imageURL: "",
      });
      setShowAddForm(false);
    } catch (error) {
      console.error("Failed to add product:", error);
    }
  };

  return (
    <div className="products-container">
      <h2 className="products-title">Products</h2>
      <button onClick={() => setShowAddForm(true)}>Add Product</button>
      <div className="table-wrapper">
        <table className="products-table">
          <thead>
            <tr>
              <th>ProductId</th>
              <th>Name</th>
              <th>Price</th>
              <th>Category</th>
              <th>Image</th>
              <th>Actions</th>
            </tr>
          </thead>
          <tbody>
            {products.map((product, index) => (
              <tr key={index}>
                <td>{product.productId}</td>
                <td>{product.name}</td>
                <td>₹{product.price}</td>
                <td>{product.category}</td>
                <td>
                  <img
                    src={product.imageURL}
                    alt={product.name}
                    className="product-image"
                    onError={(e) => (e.target.style.display = "none")}
                  />
                </td>
                <td>
                  <button onClick={() => setEditProduct(product)}>Edit</button>
                  <button
                    onClick={() => handleDeleteProduct(product.productId)}
                  >
                    Delete
                  </button>
                </td>
              </tr>
            ))}
            {products.length === 0 && (
              <tr>
                <td colSpan="5" className="no-products">
                  No products found.
                </td>
              </tr>
            )}
          </tbody>
        </table>
      </div>
      {editProduct && (
        <div className="edit-product-form">
          <h2>Edit Product</h2>
          <input
            type="int"
            placeholder="Product Id"
            value={editProduct.productId}
            onChange={(e) =>
              setEditProduct({ ...editProduct, productId: e.target.value })
            }
          />
          <input
            type="text"
            placeholder="Name"
            value={editProduct.name}
            onChange={(e) =>
              setEditProduct({ ...editProduct, name: e.target.value })
            }
          />
          <input
            type="text"
            placeholder="Price"
            value={editProduct.price}
            onChange={(e) =>
              setEditProduct({ ...editProduct, price: e.target.value })
            }
          />
          <input
            type="text"
            placeholder="Category"
            value={editProduct.category}
            onChange={(e) =>
              setEditProduct({ ...editProduct, category: e.target.value })
            }
          />
          <button onClick={handleEditProduct}>Save Changes</button>
          <button onClick={() => setEditProduct(null)}>Cancel</button>
        </div>
      )}

      {showAddForm && (
        <div className="add-product-form">
                    <h2>Add Product</h2>
          <input
            type="text"
            placeholder="Name"
            value={newProduct.name}
            onChange={(e) =>
              setNewProduct({ ...newProduct, name: e.target.value })
            }
          />
                   {" "}
          <input
            type="text"
            placeholder="Price"
            value={newProduct.price}
            onChange={(e) =>
              setNewProduct({ ...newProduct, price: e.target.value })
            }
          />{" "}
          <input
            type="text"
            placeholder="Category"
            value={newProduct.category}
            onChange={(e) =>
              setNewProduct({ ...newProduct, category: e.target.value })
            }
          />
                   {" "}
          <input
            type="text"
            placeholder="Image URL"
            value={newProduct.imageURL}
            onChange={(e) =>
              setNewProduct({ ...newProduct, imageURL: e.target.value })
            }
          />
                    <button onClick={handleAddProduct}>Add Product</button>
                   {" "}
          <button onClick={() => setShowAddForm(false)}>Cancel</button>
                 {" "}
        </div>
      )}
    </div>
  );
};

export default Products;
