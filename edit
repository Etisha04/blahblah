import React, { useEffect, useState } from "react";
import "./ProductPage.css";

function ProductPage() {
  const [products, setProducts] = useState([]);
  const [editProduct, setEditProduct] = useState(null);
  const [showAddForm, setShowAddForm] = useState(false);
  const [newProduct, setNewProduct] = useState({
    productName: "",
    price: "",
    quantity: "",
    category: "",
  });

  useEffect(() => {
    fetchProducts();
  }, []);

  const fetchProducts = async () => {
    try {
      const token = localStorage.getItem("jwtToken");
      const response = await fetch("https://localhost:7072/api/ProductManagement/all", {
        headers: {
          Authorization: `Bearer ${token}`,
        },
      });

      if (response.ok) {
        const data = await response.json();
        setProducts(data);
      } else {
        console.error("Error fetching products");
      }
    } catch (error) {
      console.error("Error fetching products:", error);
    }
  };

  const handleEdit = (product) => {
    setEditProduct(product);
    setShowAddForm(false);
  };

  const handleUpdate = async () => {
    try {
      const token = localStorage.getItem("jwtToken");
      const response = await fetch(`https://localhost:7072/api/ProductManagement/update/${editProduct.productId}`, {
        method: "PUT",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${token}`,
        },
        body: JSON.stringify(editProduct),
      });

      if (response.ok) {
        setEditProduct(null);
        fetchProducts();
      } else {
        console.error("Error updating product");
      }
    } catch (error) {
      console.error("Error updating product:", error);
    }
  };

  const handleDelete = async (productId) => {
    try {
      const token = localStorage.getItem("jwtToken");
      const response = await fetch(`https://localhost:7072/api/ProductManagement/delete/${productId}`, {
        method: "DELETE",
        headers: {
          Authorization: `Bearer ${token}`,
        },
      });

      if (response.ok) {
        fetchProducts();
      } else {
        console.error("Error deleting product");
      }
    } catch (error) {
      console.error("Error deleting product:", error);
    }
  };

  const handleAddProduct = async () => {
    try {
      const token = localStorage.getItem("jwtToken");
      const response = await fetch("https://localhost:7072/api/ProductManagement/add", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${token}`,
        },
        body: JSON.stringify(newProduct),
      });

      if (response.ok) {
        setNewProduct({
          productName: "",
          price: "",
          quantity: "",
          category: "",
        });
        setShowAddForm(false);
        fetchProducts();
      } else {
        console.error("Error adding product");
      }
    } catch (error) {
      console.error("Error adding product:", error);
    }
  };

  return (
    <div className="product-page-container">
      <div className="products-header">
        <h2 className="products-title">Products</h2>
        <button onClick={() => setShowAddForm(true)} className="add-product-button">
          + Add Product
        </button>
      </div>

      {editProduct && (
        <div className="edit-product-form">
          <h2>Edit Product</h2>
          <input
            type="text"
            value={editProduct.productName}
            onChange={(e) => setEditProduct({ ...editProduct, productName: e.target.value })}
            placeholder="Product Name"
          />
          <input
            type="text"
            value={editProduct.price}
            onChange={(e) => setEditProduct({ ...editProduct, price: e.target.value })}
            placeholder="Price"
          />
          <input
            type="text"
            value={editProduct.quantity}
            onChange={(e) => setEditProduct({ ...editProduct, quantity: e.target.value })}
            placeholder="Quantity"
          />
          <input
            type="text"
            value={editProduct.category}
            onChange={(e) => setEditProduct({ ...editProduct, category: e.target.value })}
            placeholder="Category"
          />
          <div className="button-group">
            <button onClick={handleUpdate}>Update</button>
            <button onClick={() => setEditProduct(null)}>Cancel</button>
          </div>
        </div>
      )}

      {showAddForm && (
        <div className="add-product-form">
          <h2>Add Product</h2>
          <input
            type="text"
            value={newProduct.productName}
            onChange={(e) => setNewProduct({ ...newProduct, productName: e.target.value })}
            placeholder="Product Name"
          />
          <input
            type="text"
            value={newProduct.price}
            onChange={(e) => setNewProduct({ ...newProduct, price: e.target.value })}
            placeholder="Price"
          />
          <input
            type="text"
            value={newProduct.quantity}
            onChange={(e) => setNewProduct({ ...newProduct, quantity: e.target.value })}
            placeholder="Quantity"
          />
          <input
            type="text"
            value={newProduct.category}
            onChange={(e) => setNewProduct({ ...newProduct, category: e.target.value })}
            placeholder="Category"
          />
          <div className="button-group">
            <button onClick={handleAddProduct}>Add</button>
            <button onClick={() => setShowAddForm(false)}>Cancel</button>
          </div>
        </div>
      )}

      <div className="products-card-container">
        {products.map((product) => (
          <div key={product.productId} className="product-card">
            <h3>{product.productName}</h3>
            <p><strong>Price:</strong> ${product.price}</p>
            <p><strong>Quantity:</strong> {product.quantity}</p>
            <p><strong>Category:</strong> {product.category}</p>
            <div className="card-buttons">
              <button className="edit" onClick={() => handleEdit(product)}>Edit</button>
              <button className="delete" onClick={() => handleDelete(product.productId)}>Delete</button>
            </div>
          </div>
        ))}
      </div>
    </div>
  );
}

export default ProductPage;
.product-page-container {
  padding: 20px;
}

.products-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 24px;
}

.products-title {
  font-size: 24px;
  color: #333;
}

.add-product-button {
  background-color: #3498db;
  color: white;
  padding: 10px 18px;
  border: none;
  border-radius: 8px;
  font-size: 15px;
  cursor: pointer;
  transition: background 0.3s ease;
}

.add-product-button:hover {
  background-color: #2980b9;
}

.products-card-container {
  display: flex;
  flex-wrap: wrap;
  gap: 20px;
  justify-content: center;
  margin-top: 20px;
  margin-bottom: 40px;
}

.product-card {
  background-color: #fff;
  border-radius: 12px;
  box-shadow: 0 6px 18px rgba(0, 0, 0, 0.1);
  padding: 16px;
  width: 250px;
  transition: transform 0.3s, box-shadow 0.3s;
}

.product-card:hover {
  transform: scale(1.02);
  box-shadow: 0 6px 20px rgba(0, 0, 0, 0.15);
}

.product-card h3 {
  margin-bottom: 10px;
  color: #2c3e50;
}

.product-card p {
  margin: 5px 0;
  color: #555;
}

.card-buttons {
  display: flex;
  justify-content: space-between;
  margin-top: 12px;
}

.card-buttons button {
  padding: 6px 12px;
  border: none;
  border-radius: 6px;
  font-size: 14px;
  cursor: pointer;
}

.card-buttons .edit {
  background-color: #2ecc71;
  color: white;
}

.card-buttons .edit:hover {
  background-color: #27ae60;
}

.card-buttons .delete {
  background-color: #e74c3c;
  color: white;
}

.card-buttons .delete:hover {
  background-color: #c0392b;
}

.edit-product-form,
.add-product-form {
  max-width: 400px;
  margin: 30px auto;
  background: #ffffff;
  padding: 24px;
  border-radius: 12px;
  box-shadow: 0 6px 18px rgba(0, 0, 0, 0.1);
  display: flex;
  flex-direction: column;
  gap: 14px;
}

.edit-product-form h2,
.add-product-form h2 {
  margin-bottom: 10px;
  font-size: 22px;
  color: #2c3e50;
  text-align: center;
}

.edit-product-form input,
.add-product-form input {
  padding: 10px;
  font-size: 15px;
  border: 1px solid #ccc;
  border-radius: 8px;
  outline: none;
}

.button-group {
  display: flex;
  justify-content: space-between;
}

.button-group button {
  padding: 10px;
  font-weight: bold;
  border-radius: 8px;
  cursor: pointer;
  border: none;
  transition: background 0.3s;
  flex: 1;
  margin: 0 5px;
}

.button-group button:first-of-type {
  background: #3498db;
  color: white;
}

.button-group button:last-of-type {
  background: #ccc;
  color: #2c3e50;
}

.button-group button:hover {
  opacity: 0.9;
}
