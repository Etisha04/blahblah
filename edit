using System;
using System.Collections.Generic;
using System.Linq;
 
public interface IFilm
{
    string Title { get; set; }
    int Year { get; set; }
    string Genre { get; set; }
    bool OscarNominated { get; set; }
    int StreamingCount { get; set; }
}
 
public class Film : IFilm
{
    public string Title { get; set; }
    public int Year { get; set; }
    public string Genre { get; set; }
    public bool OscarNominated { get; set; }
    public int StreamingCount { get; set; }
 
    public Film(string title, string genre, int year, bool oscarNominated, int streamingCount)
    {
        Title = title;
        Genre = genre;
        Year = year;
        OscarNominated = oscarNominated;
        StreamingCount = streamingCount;
    }
}
 
public class FilmLibrary
{
    private List<Film> films = new List<Film>();
 
    public void AddFilm(Film film)
    {
        films.Add(film);
    }
 
    public List<Film> GetFilms()
    {
        return films;
    }
 
    public List<Film> FilterByGenre(string genre)
    {
        return films.Where(f => f.Genre.Equals(genre, StringComparison.OrdinalIgnoreCase)).ToList();
    }
 
    public List<Film> FilterByYear(int year)
    {
        return films.Where(f => f.Year == year).ToList();
    }
 
    public List<Film> FilterByOscarNominations(bool isNominated)
    {
        return films.Where(f => f.OscarNominated == isNominated).ToList();
    }
 
    public List<Film> FilterByStreamingCount(int streamingCount)
    {
        return films.Where(f => f.StreamingCount >= streamingCount).ToList();
    }
}
 
class Program
{
    static void Main(string[] args)
    {
        // Example usage
        FilmLibrary library = new FilmLibrary();
        
        // Add films to the library
        library.AddFilm(new Film("The Shawshank Redemption", "Drama", 1994, false, 1000));
        library.AddFilm(new Film("The Godfather", "Crime", 1972, true, 500));
        library.AddFilm(new Film("The Dark Knight", "Action", 2008, true, 2000));
        library.AddFilm(new Film("The Lord of the Rings", "Fantasy", 2001, true, 1500));
 
        // Filter and display results
        Console.WriteLine("List of films filtered by genre \"Drama\":");
        foreach (var film in library.FilterByGenre("Drama"))
        {
            Console.WriteLine($"- \"{film.Title}\"");
        }
 
        Console.WriteLine("\nList of films filtered by year 2001:");
        foreach (var film in library.FilterByYear(2001))
        {
            Console.WriteLine($"- \"{film.Title}\"");
        }
 
        Console.WriteLine("\nList of films filtered by Oscar nominations (true):");
        foreach (var film in library.FilterByOscarNominations(true))
        {
            Console.WriteLine($"- \"{film.Title}\"");
        }
 
        Console.WriteLine("\nList of films filtered by streaming count (1000 and above):");
        foreach (var film in library.FilterByStreamingCount(1000))
        {
            Console.WriteLine($"- \"{film.Title}\"");
        }
    }
}
