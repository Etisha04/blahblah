import React, { useEffect, useState } from "react";
import "./Order.css";

const Orders = () => {
  const [orders, setOrders] = useState([]);

  useEffect(() => {
    const token = localStorage.getItem("token");
    
    if (!token) {
      console.error("No token found");
      return;
    }

    // Decode the JWT token and try to extract the user ID
    const decodedToken = JSON.parse(atob(token.split('.')[1])); // Decode the token (payload part)
    const userId = decodedToken?.sub || decodedToken?.nameid || decodedToken?.user_id; // Check for different claims

    if (!userId) {
      console.error("User ID not found in token");
      return;
    }

    // Now we have the userId, fetch orders
    fetchOrders(userId);
  }, []);

  const fetchOrders = async (userId) => {
    const token = localStorage.getItem("token");
    
    try {
      const response = await fetch(`https://localhost:7162/api/OrderManagement/Your_Orders`, {
        method: "GET",
        headers: {
          "Authorization": `Bearer ${token}`,
        },
      });

      if (!response.ok) {
        throw new Error(`Failed to fetch orders: ${response.status} (${response.statusText})`);
      }

      const data = await response.json();
      setOrders(data);
    } catch (error) {
      console.error("Error fetching orders:", error);
    }
  };

  const handleCancelOrder = async (orderID) => {
    const token = localStorage.getItem("token");

    try {
      const response = await fetch(`https://localhost:7162/api/OrderManagement/Delete_the_Order?id=${orderID}`, {
        method: "DELETE",
        headers: { "Authorization": `Bearer ${token}` },
      });

      if (!response.ok) throw new Error(`Failed to cancel order: ${response.status} (${response.statusText})`);

      setOrders(orders.filter((order) => order.orderID !== orderID));
      alert("Order canceled successfully! ‚ùå");
    } catch (error) {
      console.error("Error canceling order:", error);
    }
  };

  return (
    <div className="orders-container">
      <h2>üì¶ Your Orders</h2>

      {orders.length === 0 ? (
        <p>No orders placed yet.</p>
      ) : (
        <div className="order-items">
          {orders.map((order) => (
            <div key={order.orderID} className="order-item">
              <h3>{order.productName}</h3>
              <p>‚Çπ{order.totalPrice} - {order.quantity} Items</p>
              <p>Status: {order.orderStatus}</p>
              <button className="cancel-btn" onClick={() => handleCancelOrder(order.orderID)}>Cancel Order ‚ùå</button>
            </div>
          ))}
        </div>
      )}
    </div>
  );
};

export default Orders;
