import React, { useEffect, useState } from "react";
import axios from "axios";
import "../styles/productManagement.css"; // Import the CSS

const Products = () => {
  const [products, setProducts] = useState([]);
  const [editProduct, setEditProduct] = useState(null);

  const [newProduct, setNewProduct] = useState({
    productId: "",
    name: "",
    price: "",
    category: "",
    imageURL: "",
  });
  const [showAddForm, setShowAddForm] = useState(false);

  const token = localStorage.getItem("jwtToken");

  useEffect(() => {
    const fetchProducts = async () => {
      try {
        const response = await axios.get(
          "https://localhost:7162/api/Admin/Get_All_Products",
          {
            headers: {
              Authorization: `Bearer ${token}`,
            },
          }
        );
        setProducts(response.data);
      } catch (error) {
        console.error("Failed to fetch products:", error);
      }
    };

    fetchProducts();
  }, [token]);

  const handleDeleteProduct = async (id) => {
    try {
      await axios.delete(
        `https://localhost:7162/api/ProductManagement/Delete_Product/${id}`,
        {
          headers: {
            Authorization: `Bearer ${token}`,
          },
        }
      );
      setProducts(products.filter((product) => product.productId !== id));
    } catch (error) {
      console.error("Failed to delete product:", error);
    }
  };

  const handleEditProduct = async () => {
    try {
      const response = await axios.patch(
        `https://localhost:7162/api/ProductManagement/Edit_Product/${editProduct.productId}`,
        // editProduct,
        {
          productId: editProduct.productId,
          name: editProduct.name,
          price: editProduct.price,
          category: editProduct.category,
          imageURL: editProduct.imageURL,
        },
        {
          headers: {
            Authorization: `Bearer ${token}`,
          },
        }
      );
      setProducts(
        products.map((product) =>
          product.productId === editProduct.productId ? response.data : product
        )
      );
      setEditProduct(null);
    } catch (error) {
      console.error("Failed to edit product:", error);
    }
  };

  const handleAddProduct = async () => {
    try {
      const response = await axios.post(
        "https://localhost:7162/api/ProductManagement/Add_Products",
        newProduct,
        {
          headers: {
            Authorization: `Bearer ${token}`,
          },
        }
      );
      setProducts([...products, response.data]);
      setNewProduct({
        //productId: "",

        name: "",
        price: "",
        category: "",
        imageURL: "",
      });
      setShowAddForm(false);
    } catch (error) {
      console.error("Failed to add product:", error);
    }
  };

  return (
    <div className="products-container">
      <h2 className="products-title">Products</h2>
      <button
        onClick={() => setShowAddForm(true)}
        className="add-product-button"
      >
        Add Product
      </button>
      <div className="table-wrapper">
        <div className="products-card-container">
          {products.length === 0 ? (
            <p className="no-products">No products found.</p>
          ) : (
            products.map((product, index) => (
              <div key={index} className="product-card">
                <img
                  src={product.imageURL}
                  alt={product.name}
                  className="product-image"
                  onError={(e) => (e.target.style.display = "none")}
                />
                <h3>{product.name}</h3>
                <p>₹{product.price}</p>
                <p>{product.category}</p>
                <div className="card-buttons">
                  <button onClick={() => setEditProduct(product)}>Edit</button>
                  <button
                    onClick={() => handleDeleteProduct(product.productId)}
                  >
                    Delete
                  </button>
                </div>
              </div>
            ))
          )}
        </div>
      </div>
      {editProduct && (
        <div className="edit-product-form">
          <h2>Edit Product</h2>
          <input
            type="int"
            placeholder="Product Id"
            value={editProduct.productId}
            onChange={(e) =>
              setEditProduct({ ...editProduct, productId: e.target.value })
            }
          />
          <input
            type="text"
            placeholder="Name"
            value={editProduct.name}
            onChange={(e) =>
              setEditProduct({ ...editProduct, name: e.target.value })
            }
          />
          <input
            type="text"
            placeholder="Price"
            value={editProduct.price}
            onChange={(e) =>
              setEditProduct({ ...editProduct, price: e.target.value })
            }
          />
          <input
            type="text"
            placeholder="Category"
            value={editProduct.category}
            onChange={(e) =>
              setEditProduct({ ...editProduct, category: e.target.value })
            }
          />
          <button onClick={handleEditProduct}>Save Changes</button>
          <button onClick={() => setEditProduct(null)}>Cancel</button>
        </div>
      )}

      {showAddForm && (
        <div className="add-product-form">
                    <h2>Add Product</h2>
          <input
            type="text"
            placeholder="Name"
            value={newProduct.name}
            onChange={(e) =>
              setNewProduct({ ...newProduct, name: e.target.value })
            }
          />
                   {" "}
          <input
            type="text"
            placeholder="Price"
            value={newProduct.price}
            onChange={(e) =>
              setNewProduct({ ...newProduct, price: e.target.value })
            }
          />{" "}
          <input
            type="text"
            placeholder="Category"
            value={newProduct.category}
            onChange={(e) =>
              setNewProduct({ ...newProduct, category: e.target.value })
            }
          />
                   {" "}
          <input
            type="text"
            placeholder="Image URL"
            value={newProduct.imageURL}
            onChange={(e) =>
              setNewProduct({ ...newProduct, imageURL: e.target.value })
            }
          />
                    <button onClick={handleAddProduct}>Add Product</button>
                   {" "}
          <button onClick={() => setShowAddForm(false)}>Cancel</button>
                 {" "}
        </div>
      )}
    </div>
  );
};

export default Products;
.products-card-container {
  display: flex;
  flex-wrap: wrap;
  gap: 20px;
  justify-content: center;
  margin-top: 20px;
}

.product-card {
  background: #ffffff;
  border-radius: 12px;
  box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
  width: 250px;
  padding: 20px;
  transition: transform 0.2s;
  text-align: center;
}

.product-card:hover {
  transform: translateY(-5px);
}

.product-image {
  width: 100%;
  max-width: 220px;
  height: 180px;
  object-fit: cover;
  border-radius: 8px;
  margin-bottom: 10px;
}

.card-buttons {
  margin-top: 10px;
}

.card-buttons button {
  margin: 5px;
  padding: 6px 12px;
  background-color: #00aaff;
  border: none;
  border-radius: 6px;
  color: white;
  cursor: pointer;
  font-weight: bold;
}

.card-buttons button:hover {
  background-color: #007acc;
}

/* .no-products {
      text-align: center;
      font-size: 18px;
      color: #777;
    } */

.products-container {
  padding: 24px;
  font-family: "Segoe UI", Tahoma, Geneva, Verdana, sans-serif;
}

.products-title {
  font-size: 28px;
  color: #1f2937;
  font-weight: bold;
  margin-bottom: 16px;
}

.table-wrapper {
  overflow-x: auto;
  background: #ffffff;
  border-radius: 12px;
  box-shadow: 0 6px 20px rgba(0, 0, 0, 0.06);
}

.products-table {
  width: 100%;
  border-collapse: collapse;
  border-radius: 12px;
  overflow: hidden;
}

.products-table thead {
  background-color: #f3f4f6;
  color: #111827;
  font-weight: 600;
  text-align: left;
}

.products-table th,
.products-table td {
  padding: 14px 20px;
  border-bottom: 1px solid #e5e7eb;
  font-size: 15px;
  vertical-align: middle;
}

.products-table tbody tr:hover {
  background-color: #f9fafb;
  transition: background 0.3s ease;
}

.product-image {
  width: 220px; /* Fixed width */
  height: 180px; /* Fixed height */
  object-fit: contain; /* Ensures images maintain aspect ratio */
  border-radius: 8px;
  margin-bottom: 10px;
}

.no-products {
  text-align: center;
  color: #9ca3af;
  padding: 20px;
  font-style: italic;
}
.add-product-button {
  display: block;
  margin-left: auto; /* Pushes the button to the right */
  padding: 12px 20px;
  background: #3498db; /* Modern blue shade */
  color: white;
  font-size: 16px;
  font-weight: bold;
  border: none;
  border-radius: 6px;
  cursor: pointer;
  transition: background 0.3s ease, transform 0.2s ease;
  box-shadow: 2px 4px 10px rgba(0, 0, 0, 0.1);
}

.add-product-button:hover {
  background: #2980b9; /* Slightly darker shade on hover */
  transform: translateY(-2px);
}

.add-product-button:active {
  background: #2471a3;
  transform: translateY(0);
}
